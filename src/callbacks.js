import { db } from './database.js';
import { createCheckoutSession } from './stripe.js';
import { getVideoCost, getCostLabel, canAfford } from './pricing.js';

export async function handleCallbackQuery(bot, query) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;

  // Handle payment method selection
  if (data.startsWith('payment_')) {
    await handlePaymentMethodCallback(bot, query, data);
  }
  // Handle back to payment
  else if (data === 'back_to_payment') {
    await handlePaymentMethodCallback(bot, query, 'payment_back');
  }
  // Handle buy credits callback
  else if (data.startsWith('buy_')) {
    await handleBuyCallback(bot, query, data);
  }
  // Handle image-to-video callbacks
  else if (data.startsWith('imgvid_')) {
    await handleImageVideoCallback(bot, query, data);
  }
  // Handle image-to-video duration selection
  else if (data.startsWith('imgdur_')) {
    await handleImageDurationCallback(bot, query, data);
  }
  // Handle image-to-video size selection
  else if (data.startsWith('imgsize_')) {
    await handleImageSizeCallback(bot, query, data);
  }
  // Handle image-to-video model selection
  else if (data.startsWith('imgmodel_')) {
    await handleImageModelCallback(bot, query, data);
  }
  // Handle configuration menu
  else if (data.startsWith('cfg_')) {
    await handleConfigCallback(bot, query, data);
  }
  // Handle quick generation
  else if (data.startsWith('quick_')) {
    await handleQuickGenerateCallback(bot, query, data);
  }
  // Handle duration selection
  else if (data.startsWith('dur_')) {
    await handleDurationCallback(bot, query, data);
  }
  // Handle size selection
  else if (data.startsWith('size_')) {
    await handleSizeCallback(bot, query, data);
  }
  // Handle model selection
  else if (data.startsWith('model_')) {
    await handleModelCallback(bot, query, data);
  }
  // Handle old format for backward compatibility
  else if (data.startsWith('gen_')) {
    await handleGenerateCallback(bot, query, data);
  }

  bot.answerCallbackQuery(query.id);
}

// Handle payment method selection
async function handlePaymentMethodCallback(bot, query, data) {
  const chatId = query.message.chat.id;
  const method = data.split('_')[1]; // stripe or kaspi

  if (method === 'stripe') {
    // Show Stripe packages
    const keyboard = {
      inline_keyboard: [
        [{ text: '742 —Ç–æ–∫–µ–Ω–∞ –∑–∞ 742‚Ç∏ (1 –≤–∏–¥–µ–æ)', callback_data: 'buy_742_74200' }],
        [{ text: '1,484 —Ç–æ–∫–µ–Ω–∞ –∑–∞ 1,336‚Ç∏ (2 –≤–∏–¥–µ–æ, -10%)', callback_data: 'buy_1484_133600' }],
        [{ text: '3,710 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 3,154‚Ç∏ (5 –≤–∏–¥–µ–æ, -15%)', callback_data: 'buy_3710_315400' }],
        [{ text: '7,420 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 5,936‚Ç∏ (10 –≤–∏–¥–µ–æ, -20%)', callback_data: 'buy_7420_593600' }],
        [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'back_to_payment' }]
      ]
    };

    bot.editMessageText('üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ (–æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π):', {
      chat_id: chatId,
      message_id: query.message.message_id,
      reply_markup: keyboard
    });
  } else if (method === 'kaspi') {
    // Show Kaspi payment instructions
    const username = query.from.username ? `@${query.from.username}` : '–≤–∞—à username';

    bot.editMessageText(`üü£ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Kaspi

üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:
‚Ä¢ 742 —Ç–æ–∫–µ–Ω–∞ ‚Äî 742‚Ç∏
‚Ä¢ 1,484 —Ç–æ–∫–µ–Ω–∞ ‚Äî 1,336‚Ç∏
‚Ä¢ 3,710 —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî 3,154‚Ç∏
‚Ä¢ 7,420 —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî 5,936‚Ç∏

üí∞ –î–ª—è –æ–ø–ª–∞—Ç—ã:
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –Ω–∞ Kaspi
2. –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @z_dias_c
3. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞—à username: ${username}

‚è±Ô∏è –¢–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.`, {
      chat_id: chatId,
      message_id: query.message.message_id,
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', url: 'https://t.me/z_dias_c' }],
          [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'back_to_payment' }]
        ]
      }
    });
  } else if (method === 'back') {
    // Go back to payment method selection
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π (Stripe)', callback_data: 'payment_stripe' }],
        [{ text: 'üü£ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Kaspi', callback_data: 'payment_kaspi' }]
      ]
    };

    const priceInfo = `üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:

üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:
‚Ä¢ 742 —Ç–æ–∫–µ–Ω–∞ ‚Äî 742‚Ç∏ (1 –≤–∏–¥–µ–æ)
‚Ä¢ 1,484 —Ç–æ–∫–µ–Ω–∞ ‚Äî 1,336‚Ç∏ (2 –≤–∏–¥–µ–æ, -10%)
‚Ä¢ 3,710 —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî 3,154‚Ç∏ (5 –≤–∏–¥–µ–æ, -15%)
‚Ä¢ 7,420 —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî 5,936‚Ç∏ (10 –≤–∏–¥–µ–æ, -20%)

üìπ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–¥–µ–æ (8 —Å–µ–∫):
‚Ä¢ Sora-2 (720p): 742‚Ç∏
‚Ä¢ Sora-2 Pro (720p): 1,928‚Ç∏
‚Ä¢ Sora-2 Pro (1080p): 3,115‚Ç∏

1 —Ç–æ–∫–µ–Ω = 1‚Ç∏ (—Ç–µ–Ω–≥–µ)`;

    bot.editMessageText(priceInfo, {
      chat_id: chatId,
      message_id: query.message.message_id,
      reply_markup: keyboard
    });
  }
}

async function handleBuyCallback(bot, query, data) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;

  const parts = data.split('_');
  const credits = parseInt(parts[1]);
  const amount = parseInt(parts[2]); // amount in tiyins (1/100 tenge)

  try {
    const session = await createCheckoutSession(userId, credits, amount);

    bot.sendMessage(chatId, `üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞!

üì¶ –¢–æ–∫–µ–Ω–æ–≤: ${credits.toLocaleString('ru-RU')}
üí∞ –°—É–º–º–∞: ${(amount / 100).toLocaleString('ru-RU')}‚Ç∏

üîó –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:
${session.url}

‚úÖ –¢–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.`);
  } catch (error) {
    console.error('Error creating checkout session:', error);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// Configuration menu - step 1: choose duration
async function handleConfigCallback(bot, query, data) {
  const chatId = query.message.chat.id;
  const promptId = data.split('_')[1];

  const keyboard = {
    inline_keyboard: [
      [{ text: '‚ö° 4 —Å–µ–∫ (–æ—Ç 445‚Ç∏)', callback_data: `dur_${promptId}_4` }],
      [{ text: 'üé¨ 6 —Å–µ–∫ (–æ—Ç 594‚Ç∏)', callback_data: `dur_${promptId}_6` }],
      [{ text: '‚≠ê 8 —Å–µ–∫ (–æ—Ç 742‚Ç∏)', callback_data: `dur_${promptId}_8` }],
      [{ text: 'üé• 10 —Å–µ–∫ (–æ—Ç 890‚Ç∏)', callback_data: `dur_${promptId}_10` }],
      [{ text: 'üéûÔ∏è 12 —Å–µ–∫ (–æ—Ç 1,039‚Ç∏)', callback_data: `dur_${promptId}_12` }]
    ]
  };

  bot.editMessageText('‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ:', {
    chat_id: chatId,
    message_id: query.message.message_id,
    reply_markup: keyboard
  });
}

// Step 2: choose size
async function handleDurationCallback(bot, query, data) {
  const chatId = query.message.chat.id;
  const parts = data.split('_');
  const promptId = parts[1];
  const seconds = parts[2];

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ 720p', callback_data: `size_${promptId}_${seconds}_720x1280` }],
      [{ text: 'üñ•Ô∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ 720p', callback_data: `size_${promptId}_${seconds}_1280x720` }],
      [{ text: '‚¨õ –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ 720p', callback_data: `size_${promptId}_${seconds}_1024x1024` }]
    ]
  };

  bot.editMessageText(`‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${seconds} —Å–µ–∫\n\nüìê –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –≤–∏–¥–µ–æ:`, {
    chat_id: chatId,
    message_id: query.message.message_id,
    reply_markup: keyboard
  });
}

// Step 3: choose model
async function handleSizeCallback(bot, query, data) {
  const chatId = query.message.chat.id;
  const parts = data.split('_');
  const promptId = parts[1];
  const seconds = parts[2];
  const size = parts[3];

  const fastCost = getCostLabel(seconds, 'sora-2', size);
  const proCost = getCostLabel(seconds, 'sora-2-pro', size);

  const keyboard = {
    inline_keyboard: [
      [{ text: `üöÄ Sora-2 ‚Äî ${fastCost}`, callback_data: `model_${promptId}_${seconds}_${size}_sora-2` }],
      [{ text: `üíé Sora-2 Pro ‚Äî ${proCost}`, callback_data: `model_${promptId}_${seconds}_${size}_sora-2-pro` }]
    ]
  };

  const sizeLabel = size === '720x1280' ? 'üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ' : size === '1280x720' ? 'üñ•Ô∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ' : '‚¨õ –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ';

  bot.editMessageText(`‚ú® –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ:

‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${seconds} —Å–µ–∫
${sizeLabel}

üé¨ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ:`, {
    chat_id: chatId,
    message_id: query.message.message_id,
    reply_markup: keyboard
  });
}

// Final step: enqueue with all parameters
async function handleModelCallback(bot, query, data) {
  await enqueueVideoJob(bot, query, data);
}

// Quick generation with default/preset parameters
async function handleQuickGenerateCallback(bot, query, data) {
  await enqueueVideoJob(bot, query, data);
}

// Old format for backward compatibility
async function handleGenerateCallback(bot, query, data) {
  const parts = data.split('_');
  // Convert old format: gen_model_promptId to quick_model_promptId_8_1280x720
  const model = parts[1];
  const promptId = parts[2];
  const newData = `quick_${model}_${promptId}_8_1280x720`;
  await enqueueVideoJob(bot, query, newData);
}

// Common function to enqueue job with parameters
async function enqueueVideoJob(bot, query, data) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;

  // Parse: quick_model_promptId_seconds_size OR model_promptId_seconds_size_model
  const parts = data.split('_');
  let model, promptId, seconds, size;

  if (parts[0] === 'quick') {
    model = parts[1];
    promptId = parseInt(parts[2]);
    seconds = parts[3];
    size = parts[4];
  } else if (parts[0] === 'model') {
    promptId = parseInt(parts[1]);
    seconds = parts[2];
    size = parts[3];
    model = parts[4];
  }

  // Retrieve prompt from database
  const pendingPrompt = db.getPendingPrompt(promptId, userId);

  if (!pendingPrompt) {
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–º–ø—Ç –∏—Å—Ç—ë–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /generate —Å–Ω–æ–≤–∞.');
    return;
  }

  const prompt = pendingPrompt.prompt;
  const user = db.getUser(userId);

  // Calculate video cost with size parameter
  const videoCost = getVideoCost(seconds, model, size);

  // Check if user has enough tokens
  if (!canAfford(user.credits, seconds, model, size)) {
    bot.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤!

üí∞ –£ –≤–∞—Å: ${Math.floor(user.credits)} —Ç–æ–∫–µ–Ω–æ–≤
üí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${videoCost.formatted} —Ç–æ–∫–µ–Ω–æ–≤
üìâ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: ${Math.floor(videoCost.credits - user.credits)} —Ç–æ–∫–µ–Ω–æ–≤

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤.`);
    return;
  }

  // Deduct tokens for video cost
  db.updateCredits(userId, -videoCost.credits);

  // Enqueue the job with parameters
  const result = db.enqueueJobWithParams(userId, chatId, prompt, model, seconds, size);
  const jobId = result.lastInsertRowid;

  // Delete the pending prompt
  db.deletePendingPrompt(promptId);

  // Get queue position
  const pendingCount = db.getPendingJobCount();
  const position = pendingCount;

  const sizeLabel = size === '720x1280' ? '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ' : size === '1280x720' ? '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ' : '–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ';
  const newBalance = user.credits - videoCost.credits;

  await bot.sendMessage(chatId, `‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å!

üìã ID –∑–∞–¥–∞–Ω–∏—è: ${jobId}
üé¨ –ú–æ–¥–µ–ª—å: ${model}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${seconds} —Å–µ–∫
üìê –†–∞–∑–º–µ—Ä: ${sizeLabel} (${size})
üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${videoCost.formatted}‚Ç∏
üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${Math.floor(newBalance)}‚Ç∏
üìù –ü—Ä–æ–º–ø—Ç: ${prompt}
üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${position > 1 ? `#${position}` : '–°–ª–µ–¥—É—é—â–∏–π'}

–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—á–µ—Ä–µ–¥–∏.`);
}

// Handle image-to-video callbacks
async function handleImageVideoCallback(bot, query, data) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;

  // Parse: imgvid_<preset>_<promptId>
  const parts = data.split('_');
  const preset = parts[1]; // sora2, pro, custom
  const promptId = parseInt(parts[2]); // promptId from database

  // Get pending prompt with metadata (file_id)
  const pendingPrompt = db.getPendingPrompt(promptId, userId);
  if (!pendingPrompt) {
    bot.sendMessage(chatId, '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.');
    return;
  }

  const prompt = pendingPrompt.prompt;
  const fileId = pendingPrompt.metadata; // file_id stored in metadata

  if (!fileId) {
    bot.sendMessage(chatId, '‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑.');
    return;
  }

  if (preset === 'sora2') {
    // Quick: Sora-2, 8 sec, 1280x720
    await enqueueImageVideoJob(bot, chatId, userId, fileId, prompt, 'sora-2', '8', '1280x720', promptId);
  } else if (preset === 'pro') {
    // Quick: Sora-2 Pro, 8 sec, 1280x720
    await enqueueImageVideoJob(bot, chatId, userId, fileId, prompt, 'sora-2-pro', '8', '1280x720', promptId);
  } else if (preset === 'custom') {
    // Show custom configuration menu
    const keyboard = {
      inline_keyboard: [
        [{ text: '‚ö° 4 —Å–µ–∫ (–æ—Ç 445‚Ç∏)', callback_data: `imgdur_${promptId}_4` }],
        [{ text: 'üé¨ 6 —Å–µ–∫ (–æ—Ç 594‚Ç∏)', callback_data: `imgdur_${promptId}_6` }],
        [{ text: '‚≠ê 8 —Å–µ–∫ (–æ—Ç 742‚Ç∏)', callback_data: `imgdur_${promptId}_8` }],
        [{ text: 'üé• 10 —Å–µ–∫ (–æ—Ç 890‚Ç∏)', callback_data: `imgdur_${promptId}_10` }],
        [{ text: 'üéûÔ∏è 12 —Å–µ–∫ (–æ—Ç 1,039‚Ç∏)', callback_data: `imgdur_${promptId}_12` }]
      ]
    };

    bot.editMessageText('‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ:', {
      chat_id: chatId,
      message_id: query.message.message_id,
      reply_markup: keyboard
    });
  }
}

// Enqueue image-to-video job
async function enqueueImageVideoJob(bot, chatId, userId, fileId, prompt, model, seconds, size, promptId) {
  const user = db.getUser(userId);

  // Calculate video cost
  const videoCost = getVideoCost(seconds, model, size);

  // Check if user has enough tokens
  if (!canAfford(user.credits, seconds, model, size)) {
    bot.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤!

üí∞ –£ –≤–∞—Å: ${Math.floor(user.credits)} —Ç–æ–∫–µ–Ω–æ–≤
üí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${videoCost.formatted} —Ç–æ–∫–µ–Ω–æ–≤
üìâ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: ${Math.floor(videoCost.credits - user.credits)} —Ç–æ–∫–µ–Ω–æ–≤

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤.`);
    return;
  }

  // Deduct tokens
  db.updateCredits(userId, -videoCost.credits);

  // Enqueue job with file_id
  const result = db.enqueueImageVideoJob(userId, chatId, prompt, model, seconds, size, fileId);
  const jobId = result.lastInsertRowid;

  // Delete pending prompt
  db.deletePendingPrompt(promptId);

  const pendingCount = db.getPendingJobCount();
  const sizeLabel = size === '720x1280' ? '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ' : size === '1280x720' ? '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ' : '–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ';
  const newBalance = user.credits - videoCost.credits;

  await bot.sendMessage(chatId, `‚úÖ –í–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å!

üñºÔ∏è‚û°Ô∏èüé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
üìã ID –∑–∞–¥–∞–Ω–∏—è: ${jobId}
üé¨ –ú–æ–¥–µ–ª—å: ${model}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${seconds} —Å–µ–∫
üìê –†–∞–∑–º–µ—Ä: ${sizeLabel} (${size})
üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${videoCost.formatted}‚Ç∏
üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${Math.floor(newBalance)}‚Ç∏
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${prompt}
üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${pendingCount > 1 ? `#${pendingCount}` : '–°–ª–µ–¥—É—é—â–∏–π'}

–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.`);
}

// Handle image-to-video duration selection
async function handleImageDurationCallback(bot, query, data) {
  const chatId = query.message.chat.id;
  const parts = data.split('_');
  const promptId = parts[1];
  const seconds = parts[2];

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ 720p', callback_data: `imgsize_${promptId}_${seconds}_720x1280` }],
      [{ text: 'üñ•Ô∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ 720p', callback_data: `imgsize_${promptId}_${seconds}_1280x720` }],
      [{ text: '‚¨õ –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ 720p', callback_data: `imgsize_${promptId}_${seconds}_1024x1024` }]
    ]
  };

  bot.editMessageText(`‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${seconds} —Å–µ–∫\n\nüìê –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –≤–∏–¥–µ–æ:`, {
    chat_id: chatId,
    message_id: query.message.message_id,
    reply_markup: keyboard
  });
}

// Handle image-to-video size selection
async function handleImageSizeCallback(bot, query, data) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const parts = data.split('_');
  const promptId = parts[1];
  const seconds = parts[2];
  const size = parts[3];

  const fastCost = getCostLabel(seconds, 'sora-2', size);
  const proCost = getCostLabel(seconds, 'sora-2-pro', size);

  const keyboard = {
    inline_keyboard: [
      [{ text: `üöÄ Sora-2 ‚Äî ${fastCost}`, callback_data: `imgmodel_${promptId}_${seconds}_${size}_sora-2` }],
      [{ text: `üíé Sora-2 Pro ‚Äî ${proCost}`, callback_data: `imgmodel_${promptId}_${seconds}_${size}_sora-2-pro` }]
    ]
  };

  const sizeLabel = size === '720x1280' ? 'üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ' : size === '1280x720' ? 'üñ•Ô∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ' : '‚¨õ –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ';

  bot.editMessageText(`‚ú® –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ:

‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${seconds} —Å–µ–∫
${sizeLabel}

üé¨ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ:`, {
    chat_id: chatId,
    message_id: query.message.message_id,
    reply_markup: keyboard
  });
}

// Handle image-to-video model selection - final step
async function handleImageModelCallback(bot, query, data) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;

  // Parse: imgmodel_promptId_seconds_size_model
  const parts = data.split('_');
  const promptId = parseInt(parts[1]);
  const seconds = parts[2];
  const size = parts[3];
  const model = parts[4];

  // Get pending prompt with file_id
  const pendingPrompt = db.getPendingPrompt(promptId, userId);
  if (!pendingPrompt) {
    bot.sendMessage(chatId, '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.');
    return;
  }

  const prompt = pendingPrompt.prompt;
  const fileId = pendingPrompt.metadata;

  if (!fileId) {
    bot.sendMessage(chatId, '‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑.');
    return;
  }

  // Enqueue the job
  await enqueueImageVideoJob(bot, chatId, userId, fileId, prompt, model, seconds, size, promptId);
}
