import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import { db } from './database.js';
import { handleStart, handleBalance, handleBuy, handleGenerate, handleHelp } from './commands.js';
import { handleCallbackQuery } from './callbacks.js';
import { initWorker, getWorkerStats } from './worker.js';

dotenv.config();

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
  polling: {
    interval: 1000,
    autoStart: true,
    params: {
      timeout: 10
    }
  }
});

// Initialize database
db.init();

// Initialize worker for background job processing
initWorker(bot);

// Set bot commands for menu button
bot.setMyCommands([
  { command: 'start', description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
  { command: 'help', description: '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é' },
  { command: 'generate', description: '–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞' },
  { command: 'balance', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å' },
  { command: 'buy', description: '–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã' },
  { command: 'queue', description: '–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏' },
]).then(() => {
  console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
}).catch(err => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥:', err.message);
});

// Admin user ID from environment variable
const ADMIN_USER_ID = parseInt(process.env.ADMIN_USER_ID || '0');

// Command handlers with error catching
bot.onText(/\/start/, (msg) => handleStart(bot, msg).catch(err => console.error('Error in /start:', err.message)));
bot.onText(/\/help/, (msg) => handleHelp(bot, msg).catch(err => console.error('Error in /help:', err.message)));
bot.onText(/\/balance/, (msg) => handleBalance(bot, msg).catch(err => console.error('Error in /balance:', err.message)));
bot.onText(/\/buy/, (msg) => handleBuy(bot, msg).catch(err => console.error('Error in /buy:', err.message)));
bot.onText(/\/generate (.+)/, (msg, match) => handleGenerate(bot, msg, match[1]).catch(err => console.error('Error in /generate:', err.message)));

// Queue status command
bot.onText(/\/queue/, (msg) => {
  const stats = getWorkerStats();
  bot.sendMessage(msg.chat.id, `üìä –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏:

–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: ${stats.activeJobs}
–í –æ—á–µ—Ä–µ–¥–∏: ${stats.pendingJobs}
–ú–∞–∫—Å. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: ${stats.maxConcurrent}
–°—Ç–∞—Ç—É—Å: ${stats.isShuttingDown ? '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã' : '–†–∞–±–æ—Ç–∞–µ—Ç'}
  `);
});

// Admin command to show user statistics
bot.onText(/\/users/, (msg) => {
  if (msg.from.id !== ADMIN_USER_ID) {
    bot.sendMessage(msg.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    return;
  }

  try {
    const stats = db.getUserStats();
    const users = db.getAllUsers(10); // Get last 10 users

    const recentUsersList = users.map(u => {
      const date = new Date(u.created_at).toLocaleDateString('ru-RU');
      const credits = Math.floor(u.credits);
      return `‚Ä¢ @${u.username || 'no_username'} (ID: ${u.user_id})\n  –ë–∞–ª–∞–Ω—Å: ${credits}‚Ç∏ | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${date}`;
    }).join('\n\n');

    const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}
üí∞ –° –±–∞–ª–∞–Ω—Å–æ–º > 0: ${stats.usersWithCredits}

üí≥ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats.totalCredits.toLocaleString('ru-RU')}‚Ç∏
üì¶ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${stats.totalOrders}
üíµ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${Math.floor(stats.totalRevenue).toLocaleString('ru-RU')}‚Ç∏

üé¨ –°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ: ${stats.totalVideos}

üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:

${recentUsersList}`;

    bot.sendMessage(msg.chat.id, message);
  } catch (error) {
    console.error('Error in /users:', error);
    bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
});

// Admin command to topup user balance
bot.onText(/\/topup (@?\w+) (\d+)/, (msg, match) => {
  if (msg.from.id !== ADMIN_USER_ID) {
    bot.sendMessage(msg.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    return;
  }

  const username = match[1].replace('@', ''); // Remove @ if present
  const amount = parseInt(match[2]);

  try {
    const users = db.getUserByUsername(username);

    if (users.length === 0) {
      bot.sendMessage(msg.chat.id, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (/start)`);
      return;
    }

    if (users.length > 1) {
      const userList = users.map(u => `- ID: ${u.user_id}, –ë–∞–ª–∞–Ω—Å: ${Math.floor(u.credits)}‚Ç∏`).join('\n');
      bot.sendMessage(msg.chat.id, `‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å username ${username}:\n${userList}`);
      return;
    }

    const user = users[0];
    const oldBalance = Math.floor(user.credits);

    db.updateCredits(user.user_id, amount);

    const updatedUser = db.getUser(user.user_id);
    const newBalance = Math.floor(updatedUser.credits);

    bot.sendMessage(msg.chat.id, `‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${user.username}
üÜî ID: ${user.user_id}
üí∞ –ë—ã–ª–æ: ${oldBalance.toLocaleString('ru-RU')}‚Ç∏
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: ${amount.toLocaleString('ru-RU')}‚Ç∏
üí≥ –°—Ç–∞–ª–æ: ${newBalance.toLocaleString('ru-RU')}‚Ç∏

üìπ –ú–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å: ~${Math.floor(newBalance / 742)} –≤–∏–¥–µ–æ (8 —Å–µ–∫, Sora-2)`);

    // Notify user about topup
    bot.sendMessage(user.user_id, `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!

–î–æ–±–∞–≤–ª–µ–Ω–æ: ${amount.toLocaleString('ru-RU')}‚Ç∏
–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance.toLocaleString('ru-RU')}‚Ç∏

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ`).catch(() => {
      console.log(`Could not notify user ${user.user_id} about topup`);
    });

  } catch (error) {
    console.error('Error in /topup:', error);
    bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
});

// Photo handler for image-to-video generation
bot.on('photo', async (msg) => {
  try {
    const userId = msg.from.id;
    const username = msg.from.username || msg.from.first_name;
    const chatId = msg.chat.id;

    // Get or create user
    let user = db.getUser(userId);
    if (!user) {
      db.createUser(userId, username);
      user = db.getUser(userId);
    }

    // Get the highest resolution photo
    const photo = msg.photo[msg.photo.length - 1];
    const caption = msg.caption || '';

    if (!caption.trim()) {
      bot.sendMessage(chatId, `üñºÔ∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!

–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤ –≤–∏–¥–µ–æ.

–ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "She turns around and smiles"
‚Ä¢ "The camera slowly zooms in"
‚Ä¢ "Rain starts falling"

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤ –ø–æ–¥–ø–∏—Å–∏.`);
      return;
    }

    // Store prompt and file_id in database (file_id is too long for callback_data)
    const result = db.setPendingPrompt(userId, caption);
    const promptId = result.lastInsertRowid;

    // Store file_id in metadata
    db.updatePendingPromptMetadata(promptId, photo.file_id);

    // Show options with promptId only
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ö° –ë—ã—Å—Ç—Ä–æ (Sora-2)', callback_data: `imgvid_sora2_${promptId}` },
          { text: 'üíé –ü—Ä–µ–º–∏—É–º (Sora-2 Pro)', callback_data: `imgvid_pro_${promptId}` }
        ],
        [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', callback_data: `imgvid_custom_${promptId}` }]
      ]
    };

    bot.sendMessage(chatId, `üñºÔ∏è‚û°Ô∏èüé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

üìù –û–ø–∏—Å–∞–Ω–∏–µ: "${caption}"

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:`, { reply_markup: keyboard });

  } catch (error) {
    console.error('Error in photo handler:', error.message);
    bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Callback query handler for inline buttons with error catching
bot.on('callback_query', (query) => {
  handleCallbackQuery(bot, query).catch(err => {
    console.error('Error in callback_query:', err.message);
    bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' }).catch(() => {});
  });
});

// Error handling with retry logic
let pollingErrorCount = 0;
const MAX_POLLING_ERRORS = 5;

bot.on('polling_error', (error) => {
  pollingErrorCount++;

  // Log different error types differently
  if (error.code === 'EFATAL' || error.code === 'ETIMEDOUT' || error.code === 'ECONNRESET') {
    // These are temporary network errors - don't spam console
    if (pollingErrorCount === 1) {
      console.warn(`‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (${error.code}). –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...`);
    }
  } else if (error.response?.statusCode === 409) {
    console.error('‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç: –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º!');
    process.exit(1);
  } else {
    console.error('–û—à–∏–±–∫–∞ polling:', error.message || error);
  }

  // Exit if too many consecutive errors
  if (pollingErrorCount >= MAX_POLLING_ERRORS) {
    console.error(`‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ (${MAX_POLLING_ERRORS}). –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...`);
    process.exit(1);
  }

  // Reset error count after 30 seconds of successful polling
  setTimeout(() => {
    pollingErrorCount = Math.max(0, pollingErrorCount - 1);
  }, 30000);
});

// Reset error count on successful polling
bot.on('message', () => {
  if (pollingErrorCount > 0) {
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    pollingErrorCount = 0;
  }
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
  console.error('Uncaught exception:', error);
  // Don't exit immediately, give worker time to finish jobs
});

process.on('unhandledRejection', (reason, promise) => {
  // Filter out common network errors that are already handled
  if (reason?.code === 'EFATAL' || reason?.code === 'ETIMEDOUT' || reason?.code === 'ECONNRESET') {
    // These are already logged by polling_error handler
    return;
  }
  console.error('Unhandled rejection:', reason?.message || reason);
});

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Ñ–æ–Ω–æ–≤—ã–º –≤–æ—Ä–∫–µ—Ä–æ–º...');
